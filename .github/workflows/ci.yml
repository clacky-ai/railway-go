name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Go环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: 缓存Go模块
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: 下载依赖
      run: go mod download

    - name: 运行测试
      run: go test -v ./...

    - name: 运行代码检查
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Go环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: 构建二进制文件
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p build
        if [ "$GOOS" = "windows" ]; then
          go build -ldflags="-w -s" -o build/railway-$GOOS-$GOARCH.exe cmd/railway/main.go
        else
          go build -ldflags="-w -s" -o build/railway-$GOOS-$GOARCH cmd/railway/main.go
        fi

    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: railway-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 构建Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: railway-cli:latest
